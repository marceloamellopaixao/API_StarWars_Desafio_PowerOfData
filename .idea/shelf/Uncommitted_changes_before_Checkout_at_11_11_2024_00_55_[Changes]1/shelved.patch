Index: api/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import boto3\r\nimport requests\r\nimport json\r\nimport botocore\r\n\r\n# Função para buscar os dados na api\r\nSWAPI_URL = 'https://swapi.dev/api/'\r\ndef search_data(endpoint):\r\n    response = requests.get(SWAPI_URL + endpoint)\r\n    try:\r\n        if response.status_code == 200:\r\n            return response.json()\r\n        else:\r\n            return {'Erro reconhecido': 'Dado não encontrado'}, response.status_code\r\n    except Exception as e:\r\n        return {'Erro reconhecido': str(e)}, response.status_code\r\n\r\n\r\n# Função de Filtragem dos Dados\r\ndef filter_data(data_list, **search_params):\r\n    \"\"\"Filtra a lista de dados de acordo com os critérios de pesquisa.\r\n\r\n    Args:\r\n        data_list (list): A lista de dados a ser filtrada.\r\n        search_params (dict): Parâmetros de pesquisa.\r\n\r\n    Returns:\r\n        list: A lista filtrada.\r\n    \"\"\"\r\n    filtered_data = []\r\n    for item in data_list:\r\n        match = True\r\n        for key, value in search_params.items():\r\n            if value and value.lower() not in str(item.get(key, '')).lower():\r\n                match = False\r\n                break\r\n        if match:\r\n            filtered_data.append(item)\r\n    return filtered_data\r\n\r\n\r\n# Função de Ordenação dos Dados\r\ndef sort_data(data_list, sort_by='name', sort_order='asc'):\r\n    \"\"\"Classifica a lista de dados de acordo com o campo e ordem especificados.\r\n\r\n    Args:\r\n        data_list (list): A lista de dados a ser classificada.\r\n        sort_by (str): O campo pelo qual classificar.\r\n        sort_order (str): A ordem da classificação ('asc' ou 'desc').\r\n\r\n    Returns:\r\n        list: A lista classificada.\r\n    \"\"\"\r\n    return sorted(data_list, key=lambda x: x[sort_by], reverse=(sort_order == 'desc'))\r\n\r\n\r\n# Função de Filtro e Ordenação\r\ndef get_filter_sorted_data(search_data_func, endpoint, search_params=None, sort_params=None):\r\n    \"\"\"Função genérica para obter, filtrar e classificar dados de um endpoint.\r\n\r\n    Args:\r\n        search_data_func (function): A função que busca os dados do endpoint.\r\n        endpoint (str): O endpoint do qual obter os dados.\r\n        search_params (dict, optional): Um dicionário com os parâmetros de pesquisa.\r\n        sort_params (dict, optional): Um dicionário com os parâmetros de classificação.\r\n\r\n    Returns:\r\n        dict: Um dicionário contendo os dados filtrados e classificados.\r\n    \"\"\"\r\n    # Inicializa os parâmetros de pesquisa e classificação\r\n    if search_params is None:\r\n        search_params = {}\r\n\r\n    if sort_params is None:\r\n        sort_params = {\r\n            'sort_by': '',\r\n            'sort_order': 'asc'\r\n        }\r\n\r\n    # Busca os dados do endpoint\r\n    data = search_data_func(endpoint)\r\n    data_list = data.get('results', [])\r\n\r\n    # Filtra os dados usando os parâmetros de pesquisa\r\n    filtered_data = filter_data(data_list, **search_params)\r\n\r\n    # Obtém os parâmetros de classificação\r\n    sort_by = sort_params.get('sort_by', '')\r\n    sort_order = sort_params.get('sort_order', 'asc')\r\n\r\n    # Classifica os dados filtrados\r\n    sorted_data = sort_data(filtered_data, sort_by, sort_order)\r\n\r\n    return {'results': sorted_data}\r\n\r\n# Função de Estatísticas\r\ndef get_statistics_func(data_list, atributos):\r\n    \"\"\"\r\n    Conta a ocorrência de atributos específicos em uma lista de dicionários.\r\n\r\n    :param data_list: Lista de dicionários contendo os dados a serem analisados.\r\n    :param atributos: Lista de atributos cujas ocorrências devem ser contadas.\r\n    :return: Dicionário com a contagem de cada atributo.\r\n    \"\"\"\r\n\r\n    contagem = {atributo: {} for atributo in atributos}\r\n\r\n    for item in data_list:\r\n        for atributo in atributos:\r\n            valor = item.get(atributo)\r\n            if valor:\r\n                if valor in contagem[atributo]:\r\n                    contagem[atributo][valor] += 1\r\n                else:\r\n                    contagem[atributo][valor] = 1\r\n\r\n    return contagem\r\n\r\n# Configurações do S3\r\nBUCKET_NAME = 'api-starwars-desafio-bucket'\r\nFILE_KEY = 'credentials/users-dev.json'\r\n\r\ns3 = boto3.client('s3')\r\n\r\ndef save_users(data):\r\n    \"\"\"\r\n    Salva o usuário no arquivo.\r\n\r\n    Esta função busca o arquivo users.json, armazenando\r\n    os dados do usuário. Se o arquivo não existir, ele será criado.\r\n    \"\"\"\r\n    try:\r\n        json_data = json.dumps(data, indent=4)\r\n        response = s3.put_object(Bucket=BUCKET_NAME, Key=FILE_KEY, Body=json_data)\r\n        print(f\"Upload realizado com sucesso: {response}\")\r\n\r\n    except json.JSONDecodeError as e:\r\n        print(f\"Erro ao decodificar JSON: {e}\")\r\n\r\n    except Exception as e:\r\n        print(f\"Erro ao carregar usuários: {e}\")\r\n\r\ndef load_users():\r\n    \"\"\"\r\n    Busca todos os usuários.\r\n\r\n    Esta função busca o arquivo users.json,\r\n    trazendo todos os dados armazenados.\r\n    \"\"\"\r\n    try:\r\n        # Pega o objeto do S3\r\n        response = s3.get_object(Bucket=BUCKET_NAME, Key=FILE_KEY)\r\n        data = response['Body'].read().decode('utf-8')\r\n        return json.loads(data)\r\n\r\n    except json.JSONDecodeError as e:\r\n        print(f\"Erro ao decodificar JSON: {e}\")\r\n        return {\"users\": []}\r\n\r\n    except botocore.exceptions.ClientError as e:\r\n        if e.response['Error']['Code'] == 'NoSuchKey':\r\n            return {\"users\": []}\r\n        else:\r\n            print(f\"Erro ao carregar usuários: {e}\")\r\n            return {\"users\": []}\r\n\r\n    except Exception as e:\r\n        print(f\"Erro ao carregar usuários: {e}\")\r\n        return {\"users\": []}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/utils.py b/api/utils.py
--- a/api/utils.py	(revision 17f058405a81eff239ac7835d86ea9e6ee1a0138)
+++ b/api/utils.py	(date 1731297282186)
@@ -118,7 +118,7 @@
 
 # Configurações do S3
 BUCKET_NAME = 'api-starwars-desafio-bucket'
-FILE_KEY = 'credentials/users-dev.json'
+FILE_KEY = 'credentials/users-prod.json'
 
 s3 = boto3.client('s3')
 
